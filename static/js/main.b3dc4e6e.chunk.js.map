{"version":3,"sources":["views/Counter/styles.js","components/Counter.js","components/CounterContainer.js","App.js","reportWebVitals.js","index.js"],"names":["styles","counter","display","flexDirection","width","marginLeft","marginTop","paddingBottom","border","borderRadius","backgroundColor","h1","fontSize","textAlign","color","h2","buttonsContainer","justifyContent","Counter","count","increment","decrement","reset","style","Button","variant","onClick","CounterContainer","props","state","bind","this","setState","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yNA+BeA,EA/BA,CACXC,QAAS,CACLC,QAAS,OACTC,cAAe,SACfC,MAAO,MACPC,WAAY,MACZC,UAAW,QACXC,cAAe,OACfC,OAAQ,oBACRC,aAAc,KACdC,gBAAiB,UAEjBC,GAAI,CACAC,SAAU,OACVC,UAAW,SACXC,MAAO,WAGXC,GAAI,CACAF,UAAW,SACXC,MAAO,YAIfE,iBAAkB,CACdd,QAAS,OACTC,cAAe,MACfc,eAAgB,iB,OCDTC,MArBf,YAAwD,IAAtCC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,UAAWC,EAAQ,EAARA,MAC3C,OACI,sBAAKC,MAAOvB,EAAOC,QAAnB,UACI,oBAAIsB,MAAOvB,EAAOC,QAAQc,GAA1B,wBACA,oBAAIQ,MAAOvB,EAAOC,QAAQU,GAA1B,SAA+BQ,IAC/B,sBAAKI,MAAOvB,EAAOgB,iBAAnB,UACI,cAACQ,EAAA,EAAD,CAAQC,QAAQ,WAAWC,QAASN,EAApC,uBACA,cAACI,EAAA,EAAD,CAAQC,QAAQ,WAAWC,QAASL,EAApC,uBACA,cAACG,EAAA,EAAD,CAAQC,QAAQ,WAAWC,QAASJ,EAApC,0BCVKK,E,kDACjB,WAAaC,GAAO,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTV,MAAO,GAGX,EAAKC,UAAY,EAAKA,UAAUU,KAAf,gBACjB,EAAKT,UAAY,EAAKA,UAAUS,KAAf,gBACjB,EAAKR,MAAQ,EAAKA,MAAMQ,KAAX,gBATE,E,6CAYnB,WACIC,KAAKC,UAAS,SAAAH,GAAK,MAAK,CACpBV,MAAOU,EAAMV,MAAQ,Q,uBAI7B,WACIY,KAAKC,UAAS,SAAAH,GAAK,MAAK,CACpBV,MAAOU,EAAMV,MAAQ,Q,mBAI7B,WACIY,KAAKC,SAAS,CACVb,MAAO,M,oBAIf,WACI,OACI,cAAC,EAAD,CACIA,MAAOY,KAAKF,MAAMV,MAClBC,UAAWW,KAAKX,UAChBC,UAAWU,KAAKV,UAChBC,MAAOS,KAAKT,Y,GArCkBW,aCM/BC,MANf,WACE,OACE,cAAC,EAAD,KCOWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b3dc4e6e.chunk.js","sourcesContent":["const styles = {\r\n    counter: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        width: '30%',\r\n        marginLeft: '35%',\r\n        marginTop: '100px',\r\n        paddingBottom: '30px',\r\n        border: '2px solid #1976d2',\r\n        borderRadius: '5%',\r\n        backgroundColor: '#f8ebfa',\r\n\r\n        h1: { \r\n            fontSize: '600%',\r\n            textAlign: 'center',\r\n            color: '#1976d2'\r\n        },\r\n\r\n        h2: { \r\n            textAlign: 'center',\r\n            color: '#1976d2'\r\n        }\r\n    },\r\n\r\n    buttonsContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around'\r\n    }\r\n}\r\n\r\nexport default styles","import React from 'react';\r\nimport { Button } from '@mui/material';\r\nimport PropTypes from 'prop-types';\r\nimport styles from '../views/Counter/styles.js';\r\n\r\nfunction Counter({count, increment, decrement, reset}) {\r\n    return (\r\n        <div style={styles.counter}>\r\n            <h2 style={styles.counter.h2}>My Counter</h2>\r\n            <h1 style={styles.counter.h1}>{count}</h1>\r\n            <div style={styles.buttonsContainer}>\r\n                <Button variant=\"outlined\" onClick={increment}>Increment</Button>\r\n                <Button variant=\"outlined\" onClick={decrement}>Decrement</Button>\r\n                <Button variant=\"outlined\" onClick={reset}>Reset</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nCounter.propTypes = {\r\n    count: PropTypes.number.isRequired,\r\n    increment: PropTypes.func.isRequired,\r\n    decrement: PropTypes.func.isRequired,\r\n    reset: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Counter;","import React, { Component } from 'react'\r\nimport Counter from './Counter'\r\n\r\nexport default class CounterContainer extends Component {\r\n    constructor (props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            count: 0\r\n        };\r\n\r\n        this.increment = this.increment.bind(this);\r\n        this.decrement = this.decrement.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n    }\r\n\r\n    increment() {\r\n        this.setState(state => ({\r\n            count: state.count + 1\r\n        }))\r\n    }\r\n\r\n    decrement(){\r\n        this.setState(state => ({\r\n            count: state.count - 1\r\n        }))\r\n    }\r\n\r\n    reset() {\r\n        this.setState({\r\n            count: 0\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Counter \r\n                count={this.state.count} \r\n                increment={this.increment}\r\n                decrement={this.decrement}\r\n                reset={this.reset}>\r\n            </Counter>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\nimport CounterContainer from \"./components/CounterContainer\";\n\nfunction App() {\n  return (\n    <CounterContainer></CounterContainer>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}